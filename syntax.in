Sintactical rules: 
<program> ::= { <stmtlist> }  
<decllist> ::= <declaration> | <declaration> ";" <decllist> 
<declaration> ::= <simpledecl> | <arraydecl>
<simpledecl> ::= decl <type> <identifier> 
<arraydecl> ::= decl <type> <identifier> { <integer> }
<type> ::= bool | char | int | string
<stmtlist> ::= <stmt> | <stmt> ";" <stmtlist>
<stmt> ::= <simplstmt> | <structstmt> 
<simplstmt> ::= <assignstmt> | <iostmt> 
<assignstmt> ::= <identifier> ":=" <expression> 
<expression> ::= <expression> + <term> | <expression> - <term>   | <term>
<term> ::= <term> * <factor> | <term> / <factor> | <term> % <factor> | <factor> 
<factor> ::= ( <expression> ) | <identifier> | <integer>
<iostmt> ::= read [ <identifier> ] | print [ <expression> ] | print [ <string> ] | print [ <char> ] 
<structstmt> ::= <ifstmt> | <whilestmt> 
<ifstmt> ::= cond <condlist> { <stmtlist> } | cond <condlist> { <stmtlist> } otherwise { <stmtlist> }
<whilestmt> ::= repeat [ <condlist> ] {<stmtlist> }
<condlist> ::= <condition> | <condition> < logicalop> <condlist> 
<condition> ::= <expression> <relation> <expression>
<relation> ::= < | <= | == | <> | >= | >
<logicalop> ::= and | or